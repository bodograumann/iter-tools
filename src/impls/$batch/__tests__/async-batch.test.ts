/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$batch.test.ts#1643907550717
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncBatch } from 'iter-tools-es';
import { asyncWrap, asyncUnwrapDeep } from '../../../test/async-helpers.js';

describe('asyncBatch', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      expect(await asyncUnwrapDeep(asyncBatch(2, null))).toEqual([]);
      expect(await asyncUnwrapDeep(asyncBatch(2, undefined))).toEqual([]);
      expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has fewer than `size` values', () => {
    it('yields one incomplete batch', async () => {
      expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([1])))).toEqual([[1]]);
    });
  });

  describe('when source has more than `size` values', () => {
    describe('which can be divided evenly into batches', () => {
      it('yields batches of `size` values', async () => {
        expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([1, 2, 3, 4, 5, 6])))).toEqual([
          [1, 2],
          [3, 4],
          [5, 6],
        ]);
      });
    });

    describe('which cannot be divided evenly into batches', () => {
      it('yields batches of `size` values and one incomplete batch', async () => {
        expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([1, 2, 3, 4, 5])))).toEqual([
          [1, 2],
          [3, 4],
          [5],
        ]);
      });
    });
  });

  it('errors when passed size <= 0', async () => {
    expect(() => asyncBatch(0, [])).toThrowErrorMatchingSnapshot();
  });
});
