/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$bisect.test.ts#1643907550718
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { bisect } from 'iter-tools-es';
import { wrap, unwrapDeep } from '../../../test/helpers.js';

describe('bisect', () => {
  describe('when there are no values', () => {
    it('yields empty parts', () => {
      const [first, second] = bisect(0, wrap([]));
      expect(unwrapDeep([first, second])).toEqual([[], []]);
    });
  });

  describe('when as is a number', () => {
    describe('>= 0', () => {
      it('works when the halves are consumed in order', () => {
        const [first, second] = bisect(3, wrap([0, 1, 2, 3, 4, 5]));
        expect(unwrapDeep([first, second])).toEqual([
          [0, 1, 2],
          [3, 4, 5],
        ]);
      });

      it('works when the source is exhuasted while the first half is being consumed', () => {
        const [first, second] = bisect(3, wrap([0, 1]));
        expect(unwrapDeep([first, second])).toEqual([[0, 1], []]);
      });

      it('works when the source is exhuasted while the second half is being consumed', () => {
        const [first, second] = bisect(3, wrap([0, 1, 2, 3]));
        expect(unwrapDeep([first, second])).toEqual([[0, 1, 2], [3]]);
      });
    });

    describe('< 0', () => {
      it('works when the halves are consumed in order', () => {
        const [first, second] = bisect(-3, wrap([0, 1, 2, 3, 4, 5]));
        expect(unwrapDeep([first, second])).toEqual([
          [0, 1, 2],
          [3, 4, 5],
        ]);
      });

      it('all values are in the first part when |index| is larger than source size', () => {
        const [first, second] = bisect(-3, wrap([0, 1]));
        expect(unwrapDeep([first, second])).toEqual([[0, 1], []]);
      });
    });
  });

  describe('when as is a function', () => {
    describe('when `as(value, i)` goes from falsy to truthy', () => {
      it('puts values in each part', () => {
        const [first, second] = bisect((_, i) => i > 0, wrap([1, 2, 3]));
        expect(unwrapDeep([first, second])).toEqual([[1], [2, 3]]);
      });
    });

    describe('when `as(value, i)` is truthy initially', () => {
      it('puts all the values in the second part', () => {
        const [first, second] = bisect((v) => v > 0, wrap([1, 2, 3]));
        expect(unwrapDeep([first, second])).toEqual([[], [1, 2, 3]]);
      });
    });

    describe('when `as(value, i)` is never truthy', () => {
      it('puts all the values in the first part', () => {
        const [first, second] = bisect((_) => null, wrap([1, 2, 3]));
        expect(unwrapDeep([first, second])).toEqual([[1, 2, 3], []]);
      });
    });
  });
});
