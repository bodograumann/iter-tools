/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$bisect.js#1643837503046
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { AsyncBisector } from '../../internal/async-bisector.js';
import { __asyncToArray } from '../$to-array/async-to-array.js';
import { __asyncPeekerate } from '../$peekerate/async-peekerate.js';

export async function* asyncIndexStrategy(split, { at }, source) {
  const _source = at < 0 ? await __asyncToArray(source) : source;
  const idx = at < 0 ? _source.length + at : at;
  const peekr = await __asyncPeekerate(_source);

  try {
    while (!peekr.done) {
      if (peekr.index === idx) yield split;
      yield peekr.value;
      await peekr.advance();
    }
  } finally {
    peekr.return();
  }
}

export async function* asyncConditionStrategy(split, { at: predicate }, source) {
  let i = 0;
  let splat = false;
  for await (const value of source) {
    if (!splat && (await predicate(value, i++))) {
      yield split;
      splat = true;
    }
    yield value;
  }
}

export function __asyncBisect(source, at) {
  const strategy = typeof at === 'number' ? asyncIndexStrategy : asyncConditionStrategy;
  return new AsyncBisector(source, strategy, { at });
}

export const asyncBisect = /*#__PURE__*/ asyncIterableCurry(__asyncBisect, {
  forceSync: true,
});
