/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$deep-equal.test.ts#1643837503053
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { deepEqual, __deepEqual } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

describe('deepEqual', () => {
  describe('when there is only one iterable', () => {
    it('returns true', () => {
      expect(deepEqual(null)).toBe(true);
      expect(deepEqual(undefined)).toBe(true);
      expect(deepEqual(wrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when all values are equal', () => {
    it('returns true', () => {
      expect(deepEqual(4, 4, 4)).toBe(true);
      expect(deepEqual(NaN, NaN, NaN)).toBe(true);
    });
  });

  describe('when all values in all iterables are equal', () => {
    it('returns true', () => {
      expect(deepEqual(wrap([]), wrap([]))).toBe(true);
      expect(deepEqual(null, undefined)).toBe(true);
      expect(deepEqual(null, undefined, wrap([]))).toBe(true);
      expect(deepEqual(wrap([1, 2, 3]), wrap([1, 2, 3]))).toBe(true);
      expect(deepEqual(wrap([1, 2, 3]), wrap([1, 2, 3]), wrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when all values in some iterables are equal', () => {
    it('returns false', () => {
      expect(deepEqual(wrap([1, 2, 3]), wrap([1, 2, 3]), wrap([1, 2, 4]))).toBe(false);
      expect(deepEqual(wrap([1, 2, 3]), wrap([1, 2, 4]), wrap([1, 2, 3]))).toBe(false);
      expect(deepEqual(wrap([1, 2, 4]), wrap([1, 2, 3]), wrap([1, 2, 3]))).toBe(false);
    });
  });

  describe('when iterables have the same values but different lengths', () => {
    it('returns false', () => {
      expect(deepEqual(wrap([1]), wrap([1]), wrap([1, 2]))).toBe(false);
      expect(deepEqual(wrap([1]), wrap([1, 2]), wrap([1]))).toBe(false);
      expect(deepEqual(wrap([1, 2]), wrap([1]), wrap([1]))).toBe(false);
      expect(deepEqual(wrap([]), wrap([]), wrap([1]))).toBe(false);
      expect(deepEqual(wrap([]), wrap([1]), wrap([]))).toBe(false);
      expect(deepEqual(wrap([1]), wrap([]), wrap([]))).toBe(false);
    });
  });
});

describe('__deepEqual', () => {
  const same = (a: number, b: number) => Math.abs(a) === Math.abs(b);

  it('uses same value to do comparison', () => {
    expect(__deepEqual([wrap([-1, -2, -3]), wrap([1, 2, 3])], same)).toBe(true);
    expect(__deepEqual([wrap([1, 2, 3]), wrap([1, 2, 3])], () => false)).toBe(false);

    expect(
      __deepEqual(
        [wrap([1, wrap([2, wrap([3])])]), wrap([1, wrap([2, wrap([4])])])],
        (a: number, b: number, depth: number) => (depth > 1 ? true : Object.is(a, b)),
      ),
    ).toBe(true);
  });

  describe('when coerceNil is false', () => {
    it('can', () => {
      expect(__deepEqual([null, undefined], Object.is, false)).toBe(false);
      expect(__deepEqual([null, wrap([])], Object.is, false)).toBe(false);
    });
  });
});
