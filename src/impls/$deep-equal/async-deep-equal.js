/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$deep-equal.js#1643907550724
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _asyncIterator,
  _awaitAsyncGenerator,
  _wrapAsyncGenerator,
} from '../../internal/asyncish.js';

import { asyncIsIterable, asyncIsWrappable } from '../../internal/async-iterable.js';
import { __map } from '../$map/map.js';
import { __every } from '../$every/every.js';
import { __asyncZipAll } from '../$zip-all/async-zip-all.js';
import { __sliceFromStart } from '../$slice/slice.js';

const none = Symbol('none');
const zipAllConfig = { filler: none };

const asyncEmpty = _wrapAsyncGenerator(function* () {});

const asyncIterableOrEmpty = (value) => (value == null ? asyncEmpty() : value);

export async function _asyncDeepEqual(values, same, isIterable, depth = 0) {
  if (__every(values, (value) => typeof value !== 'string' && isIterable(value))) {
    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(__asyncZipAll(__map(values, asyncIterableOrEmpty), zipAllConfig));
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : await _step2).done);
        _iteratorAbruptCompletion = false
      ) {
        const stepValues = _step.value;
        if (!(await _asyncDeepEqual(stepValues, same, isIterable, depth + 1))) return false;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else {
    const firstValue = values[0];
    for (const value of __sliceFromStart(values, 1)) {
      if (!same(value, firstValue, depth)) return false;
    }
  }
  return true;
}

export function __asyncDeepEqual(values, same = Object.is, coerceNil = true) {
  return values.length <= 1
    ? true
    : _asyncDeepEqual(values, same, coerceNil ? asyncIsWrappable : asyncIsIterable);
}

export function asyncDeepEqual(...values) {
  return __asyncDeepEqual(values);
}
