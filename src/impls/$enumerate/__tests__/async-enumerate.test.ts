/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$enumerate.test.ts#1643907550727
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncEnumerate } from 'iter-tools-es';
import { asyncWrap, asyncUnwrap } from '../../../test/async-helpers.js';

describe('asyncEnumerate', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      expect(await asyncUnwrap(asyncEnumerate(null))).toEqual([]);
      expect(await asyncUnwrap(asyncEnumerate(undefined))).toEqual([]);
      expect(await asyncUnwrap(asyncEnumerate(asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has values', () => {
    it('yields [i, value] tuples', async () => {
      expect(await asyncUnwrap(asyncEnumerate(asyncWrap([1, 2, 3])))).toEqual([
        [0, 1],
        [1, 2],
        [2, 3],
      ]);
      expect(await asyncUnwrap(asyncEnumerate(3, asyncWrap([1, 2, 3])))).toEqual([
        [3, 1],
        [4, 2],
        [5, 3],
      ]);
      expect(await asyncUnwrap(asyncEnumerate(-3, asyncWrap([1, 2, 3])))).toEqual([
        [-3, 1],
        [-2, 2],
        [-1, 3],
      ]);
    });
  });
});
