/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$equal.js#1643907550728
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { _asyncIterator } from '../../internal/asyncish.js';

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { __asyncZipAll } from '../$zip-all/async-zip-all.js';
import { __sliceFromStart } from '../$slice/slice.js';

const none = Symbol('none');
const zipAllConfig = { filler: none };

export async function __asyncEqual(iterables, same = Object.is) {
  if (iterables.length <= 1) return true;

  let _iteratorAbruptCompletion = false;
  let _didIteratorError = false;
  let _iterator;
  let _iteratorError;

  try {
    _iterator = _asyncIterator(__asyncZipAll(iterables, zipAllConfig));
    for (
      let _step, _step2;
      (_step2 = _iterator.next()),
        (_iteratorAbruptCompletion = !(_step =
          !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
            ? _step2
            : await _step2).done);
      _iteratorAbruptCompletion = false
    ) {
      const stepValues = _step.value;
      const firstValue = stepValues[0];
      for (const value of __sliceFromStart(stepValues, 1)) {
        if (!same(value, firstValue)) return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (_iteratorAbruptCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
}

export const asyncEqual = /*#__PURE__*/ asyncIterableCurry(__asyncEqual, {
  minArgs: 0,
  maxArgs: 1,
  variadic: true,
  reduces: true,
});
