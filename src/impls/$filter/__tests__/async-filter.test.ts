/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$filter.test.ts#1643907550730
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncFilter } from 'iter-tools-es';
import { asyncWrap, asyncUnwrap } from '../../../test/async-helpers.js';

describe('asyncFilter', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      const pred = (v: any) => v;
      expect(await asyncUnwrap(asyncFilter(pred, null))).toEqual([]);
      expect(await asyncUnwrap(asyncFilter(pred, undefined))).toEqual([]);
      expect(await asyncUnwrap(asyncFilter(pred, asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has values', () => {
    it('yields values for which predicate(value, i) returns true', async () => {
      expect(
        await asyncUnwrap(asyncFilter((value, i) => value === i, asyncWrap([1, 1, 2, 3, 5, 8]))),
      ).toEqual([1, 2, 3]);
    });
  });

  it('may take an async predicate', async () => {
    const iter = asyncFilter(async (value) => value % 2 === 0, asyncWrap([1, 2, 3, 4, 5, 6]));
    expect(await asyncUnwrap(iter)).toEqual([2, 4, 6]);
  });
});
