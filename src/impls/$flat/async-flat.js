/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$flat.js#1643907550735
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator as _awaitAsyncGenerator2,
  _wrapAsyncGenerator,
  _awaitAsyncGenerator,
  _asyncIterator as _asyncIterator2,
  _asyncGeneratorDelegate,
  _asyncIterator,
} from '../../internal/asyncish.js';

import { asyncIterableCurry, asyncIsLoopable } from '../../internal/async-iterable.js';
import { validateArgs } from './internal/validate-args.js';

const defaultShouldFlat = (value) => typeof value !== 'string' && asyncIsLoopable(value);

function asyncFlatInternal(_x, _x2, _x3, _x4) {
  return _$flatInternal.apply(this, arguments);
}

function _$flatInternal() {
  _$flatInternal = _wrapAsyncGenerator(function* (shouldFlat, depth, currentDepth, source) {
    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(source);
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : yield _awaitAsyncGenerator2(_step2)).done);
        _iteratorAbruptCompletion = false
      ) {
        const value = _step.value;
        if (currentDepth < depth && (yield _awaitAsyncGenerator2(shouldFlat(value)))) {
          yield* _asyncGeneratorDelegate(
            _asyncIterator2(asyncFlatInternal(shouldFlat, depth, currentDepth + 1, value)),
            _awaitAsyncGenerator,
          );
        } else {
          yield value;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator2(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return _$flatInternal.apply(this, arguments);
}

export function __asyncFlat(source, depth = 1, shouldFlat = defaultShouldFlat) {
  return asyncFlatInternal(shouldFlat, depth, 0, source);
}

export const asyncFlat = /*#__PURE__*/ asyncIterableCurry(__asyncFlat, {
  minArgs: 0,
  maxArgs: 2,
  validateArgs,
});
