/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$forkerate.js#1649946656865
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncEnsureIterable } from '../../internal/async-iterable.js';
import { AsyncExchange } from '../../internal/async-fork.js';
import { AsyncPeekerator } from '../../internal/async-peekerator.js';

const _ = Symbol.for('_');

class AsyncForkerator extends AsyncPeekerator {
  static async from(source) {
    const exchange = new AsyncExchange(asyncEnsureIterable(source)[Symbol.asyncIterator]());
    return await super.from(exchange.fork(), exchange);
  }

  constructor(iterator, first, exchange) {
    super(iterator, first);

    this[_].exchange = exchange;
  }

  async advance(n = 1) {
    for (let i = 0; i < n; i++) {
      await super.advance();
      this[_].exchange.advance();
    }
    return this;
  }

  fork() {
    return this[_].exchange.fork();
  }

  [Symbol.asyncIterator]() {
    return this[_].exchange.fork();
  }
}

export function __asyncForkerate(source) {
  return AsyncForkerator.from(source);
}

function asyncWrapWithEnsureIterable(fn) {
  return (source) => fn(asyncEnsureIterable(source));
}

export const asyncForkerate = asyncWrapWithEnsureIterable(__asyncForkerate);
