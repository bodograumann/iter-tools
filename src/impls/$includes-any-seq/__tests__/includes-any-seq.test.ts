/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$includes-any-seq.test.ts#1643837503070
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { includesAnySeq } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

describe('includesAnySeq', () => {
  describe('when no sequences are given', () => {
    it('returns false', () => {
      expect(includesAnySeq([], wrap([]))).toBe(false);
    });
  });

  describe('when iterable includes a given sequence', () => {
    it('returns true', () => {
      expect(includesAnySeq([wrap([1, 2])], wrap([1, 2, 3]))).toBe(true);
      expect(includesAnySeq([wrap([2, 3]), wrap([1, 2])], wrap([1, 2, 3]))).toBe(true);
      expect(includesAnySeq([wrap([3])], wrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when iterable is equal to a given sequence', () => {
    it('returns true', () => {
      expect(includesAnySeq([wrap([1, 2, 3])], wrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when iterable is shorter than a matching sequence', () => {
    it('returns false', () => {
      expect(includesAnySeq([wrap([1, 2, 3])], wrap([1, 2]))).toBe(false);
    });
  });

  describe('when iterable is empty', () => {
    describe('and any sequence is empty', () => {
      it('returns true', () => {
        expect(includesAnySeq([wrap([]), wrap([null])], wrap([]))).toBe(true);
        expect(includesAnySeq([null], wrap([]))).toBe(true);
      });
    });

    describe('and no sequence is empty', () => {
      it('returns false', () => {
        expect(includesAnySeq([wrap([undefined])], wrap([]))).toBe(false);
      });
    });
  });

  describe('when same function is specified', () => {
    const same = (a: number, b: number) => Math.abs(a) === Math.abs(b);
    it('uses same value to do comparison', () => {
      expect(includesAnySeq(same, [wrap([-2])], wrap([1, 2, 3]))).toBe(true);
      expect(includesAnySeq(() => false, [wrap([2])], wrap([1, 2, 3]))).toBe(false);
    });
  });
});
