/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$includes-any.test.ts#1643907550741
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { includesAny } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

describe('includesAny', () => {
  describe('when no values are given', () => {
    it('returns false', () => {
      expect(includesAny([], wrap([]))).toBe(false);
    });
  });

  describe('when iterable includes a given value', () => {
    it('returns true', () => {
      expect(includesAny([1], wrap([1, 2, 3]))).toBe(true);
      expect(includesAny([1, 2], wrap([1, 2, 3]))).toBe(true);
      expect(includesAny([2, 1], wrap([1, 2, 3]))).toBe(true);
      expect(includesAny([3, 2, 1], wrap([1, 2, 3]))).toBe(true);
      expect(includesAny([1, 2, 3], wrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when iterable does not include a given value', () => {
    it('returns false', () => {
      expect(includesAny([-1, 0], wrap([1, 2, 3]))).toBe(false);
      expect(includesAny([undefined, null], wrap([1, 2, 3]))).toBe(false);
    });
  });

  describe('when iterable is empty', () => {
    it('returns false', () => {
      expect(includesAny([undefined], wrap([]))).toBe(false);
    });
  });

  describe('when same function is specified', () => {
    const same = (a: number, b: number) => Math.abs(a) === Math.abs(b);
    it('uses same value to do comparison', () => {
      expect(includesAny(same, [-2], wrap([1, 2, 3]))).toBe(true);
      expect(includesAny(() => false, [2], wrap([1, 2, 3]))).toBe(false);
    });
  });

  describe('when iterable is a string', () => {
    it('warns', () => {
      includesAny([], 'abc');
      expect(console.warn).callsMatchSnapshot();
    });
  });
});
