/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$join-with-seq.js#1643907550748
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator as _awaitAsyncGenerator3,
  _wrapAsyncGenerator,
  _awaitAsyncGenerator as _awaitAsyncGenerator2,
  _asyncIterator as _asyncIterator3,
  _asyncGeneratorDelegate as _asyncGeneratorDelegate2,
  _awaitAsyncGenerator,
  _asyncIterator as _asyncIterator2,
  _asyncGeneratorDelegate,
  _asyncIterator,
} from '../../internal/asyncish.js';

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { __asyncToArray } from '../$to-array/async-to-array.js';

export function __asyncJoinWithSeq(_x, _x2) {
  return _$__joinWithSeq.apply(this, arguments);
}

function _$__joinWithSeq() {
  _$__joinWithSeq = _wrapAsyncGenerator(function* (source, separatorSeq) {
    const _separatorSeq = yield _awaitAsyncGenerator3(__asyncToArray(separatorSeq));
    let isFirst = true;

    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(source);
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : yield _awaitAsyncGenerator3(_step2)).done);
        _iteratorAbruptCompletion = false
      ) {
        const value = _step.value;
        if (!isFirst)
          yield* _asyncGeneratorDelegate(_asyncIterator2(_separatorSeq), _awaitAsyncGenerator);
        yield* _asyncGeneratorDelegate2(_asyncIterator3(value), _awaitAsyncGenerator2);
        isFirst = false;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator3(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return _$__joinWithSeq.apply(this, arguments);
}

export const asyncJoinWithSeq = /*#__PURE__*/ asyncIterableCurry(__asyncJoinWithSeq);
