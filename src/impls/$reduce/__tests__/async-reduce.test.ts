/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$reduce.test.ts#1643837503085
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncReduce } from 'iter-tools-es';
import { asyncWrap } from '../../../test/async-helpers.js';

describe('asyncReduce', () => {
  describe('when iterable is empty', () => {
    describe('when no initial value specified', () => {
      it('throws', async () => {
        const error = await (async () => {
          try {
            await asyncReduce((acc: any, x) => acc + x, asyncWrap([]));
          } catch (e) {
            return e;
          }
        })();

        expect(error).toBeInstanceOf(Error);
        expect(error.message).toMatchSnapshot();
      });
    });

    describe('when an initial value is specified', () => {
      it('yields the specified initial value', async () => {
        expect(await asyncReduce(0, (acc, x) => acc + x, asyncWrap([]))).toBe(0);
      });
    });
  });

  describe('when source has values', () => {
    describe('when no initial value specified', () => {
      it('sums an array', async () => {
        expect(await asyncReduce((acc, x) => acc + x, asyncWrap([1, 2, 3]))).toBe(6);
      });
    });

    describe('when an initial value is specified', () => {
      it('sums using a specified initial value', async () => {
        expect(await asyncReduce(0, (acc, x) => acc + x, asyncWrap([1, 2, 3]))).toBe(6);
      });
    });
  });

  describe('when there is an error while reducing', () => {
    // eslint-disable-next-line jest/expect-expect
    it('closes source', async () => {
      try {
        await asyncReduce(() => {
          throw new Error('Stop the presses!');
        }, asyncWrap([1, 2, 3]));
      } catch (e) {}
    });
  });

  it('can take an async reducer', async () => {
    expect(await asyncReduce(async (acc, x) => acc + x, asyncWrap([1, 2, 3]))).toBe(6);
  });
});
