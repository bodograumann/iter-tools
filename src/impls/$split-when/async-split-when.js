/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$split-when.js#1643907550764
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator,
  _wrapAsyncGenerator,
  _asyncIterator,
} from '../../internal/asyncish.js';

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { __asyncSpliterate } from '../$spliterate/async-spliterate.js';

function asyncPredicateSpliterator(_x, _x2, _x3) {
  return _$predicateSpliterator.apply(this, arguments);
}

function _$predicateSpliterator() {
  _$predicateSpliterator = _wrapAsyncGenerator(function* (split, { predicate }, source) {
    let i = 0;
    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(source);
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : yield _awaitAsyncGenerator(_step2)).done);
        _iteratorAbruptCompletion = false
      ) {
        const value = _step.value;
        yield (yield _awaitAsyncGenerator(predicate(value, i++))) ? split : value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return _$predicateSpliterator.apply(this, arguments);
}

export function __asyncSplitWhen(source, predicate) {
  return __asyncSpliterate(source, asyncPredicateSpliterator, { predicate });
}

export const asyncSplitWhen = /*#__PURE__*/ asyncIterableCurry(__asyncSplitWhen);
