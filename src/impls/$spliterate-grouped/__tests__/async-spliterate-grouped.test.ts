/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$spliterate-grouped.test.ts#1643907550766
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator as _awaitAsyncGenerator2,
  _wrapAsyncGenerator,
  _awaitAsyncGenerator,
  _asyncIterator,
  _asyncGeneratorDelegate,
} from '../../../internal/asyncish.js';

import { asyncSpliterateGrouped } from 'iter-tools-es';
import { asyncUnwrapDeep } from '../../../test/async-helpers.js';

function asyncIdentityStrategy(_x, _x2, _x3) {
  return _$identityStrategy.apply(this, arguments);
}

function _$identityStrategy() {
  _$identityStrategy = _wrapAsyncGenerator(function* (_split: any, _options: any, source: any) {
    yield* _asyncGeneratorDelegate(_asyncIterator(source), _awaitAsyncGenerator);
  });

  return _$identityStrategy.apply(this, arguments);
}

describe('asyncSpliterateGrouped', () => {
  let split: symbol;
  const asyncTestSpliterator = asyncSpliterateGrouped((split_: any, options: any, source: any) => {
    split = split_;
    return asyncIdentityStrategy(split_, options, source);
  }, {});

  describe('when spliterator is empty', () => {
    it('yields no groups', async () => {
      expect(await asyncUnwrapDeep(asyncTestSpliterator([]))).toEqual([]);
    });
  });

  describe('when spliterator contains only a split', () => {
    it('yields two empty groups', async () => {
      expect(await asyncUnwrapDeep(asyncTestSpliterator([split, 'key']))).toEqual([['key', []]]);
    });
  });

  describe('when spliterator contains two splits', () => {
    it('yields three empty groups', async () => {
      expect(await asyncUnwrapDeep(asyncTestSpliterator([split, 'key1', split, 'key2']))).toEqual([
        ['key1', []],
        ['key2', []],
      ]);
    });
  });

  it('options may be omitted', async () => {
    const asyncTestSpliterator = asyncSpliterateGrouped(asyncIdentityStrategy);
    expect(await asyncUnwrapDeep(asyncTestSpliterator([]))).toEqual([]);
  });
});
