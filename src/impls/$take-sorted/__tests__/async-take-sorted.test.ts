/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$take-sorted.test.ts#1643837503109
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncTakeSorted } from 'iter-tools-es';
import { asyncWrap, asyncUnwrap } from '../../../test/async-helpers.js';

describe('asyncTakeSorted', () => {
  it('yields a sorted iterable if no number is specified', async () => {
    const smallest3 = asyncTakeSorted(asyncWrap([99, 12, 4, 6, 97, 44, 66, 77, 98]));
    expect(await asyncUnwrap(smallest3)).toEqual([4, 6, 12, 44, 66, 77, 97, 98, 99]);
  });

  it('yields n sorted values from the iterable', async () => {
    const smallest3 = asyncTakeSorted(3, asyncWrap([99, 12, 4, 6, 97, 44, 66, 77, 98]));
    expect(await asyncUnwrap(smallest3)).toEqual([97, 98, 99]);
    const smallest1 = asyncTakeSorted(1, asyncWrap([99, 12, 4, 6, 97, 44, 66, 77, 98]));
    expect(await asyncUnwrap(smallest1)).toEqual([99]);
  });

  it('yields values from the iterable sorted with a comparator', async () => {
    expect(await asyncUnwrap(asyncTakeSorted((a, b) => a - b, asyncWrap([2, 1, 3])))).toEqual([
      1,
      2,
      3,
    ]);
    expect(await asyncUnwrap(asyncTakeSorted((a, b) => b - a, asyncWrap([2, 1, 3])))).toEqual([
      3,
      2,
      1,
    ]);
    expect(await asyncUnwrap(asyncTakeSorted(2, (a, b) => a - b, asyncWrap([2, 1, 3])))).toEqual([
      2,
      3,
    ]);
    expect(await asyncUnwrap(asyncTakeSorted(2, (a, b) => b - a, asyncWrap([2, 1, 3])))).toEqual([
      2,
      1,
    ]);
  });
});
