/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$take-sorted.js#1643907550774
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator,
  _wrapAsyncGenerator,
  _asyncIterator,
} from '../../internal/asyncish.js';

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { defaultCompareOrder } from '../../internal/compare.js';
import { Heap } from './internal/heap.js';

export function __asyncTakeSorted(_x) {
  return _$__takeSorted.apply(this, arguments);
}

function _$__takeSorted() {
  _$__takeSorted = _wrapAsyncGenerator(function* (
    source,
    n = Infinity,
    compare = defaultCompareOrder,
  ) {
    const heap = new Heap(compare);

    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(source);
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : yield _awaitAsyncGenerator(_step2)).done);
        _iteratorAbruptCompletion = false
      ) {
        const value = _step.value;
        heap.push(value);
        if (heap.size > n) {
          heap.pop();
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    while (heap.size) {
      yield heap.pop();
    }
  });

  return _$__takeSorted.apply(this, arguments);
}

export const asyncTakeSorted = /*#__PURE__*/ asyncIterableCurry(__asyncTakeSorted, {
  minArgs: 0,
  maxArgs: 2,
  validateArgs(args) {
    if (typeof args[1] === 'function') {
      const temp = args[2];
      args[2] = args[1];
      args[1] = temp;
    }
  },
});
