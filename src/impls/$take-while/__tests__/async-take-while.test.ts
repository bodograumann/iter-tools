/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$take-while.test.ts#1643907550775
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncTakeWhile } from 'iter-tools-es';
import { asyncWrap, asyncUnwrap } from '../../../test/async-helpers.js';

describe('asyncTakeWhile', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      expect(await asyncUnwrap(asyncTakeWhile((value: any) => value, null))).toEqual([]);
      expect(await asyncUnwrap(asyncTakeWhile((value: any) => value, undefined))).toEqual([]);
      expect(await asyncUnwrap(asyncTakeWhile((value: any) => value, asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has values', () => {
    it('yields values while the result of predicate(value, i) is truthy', async () => {
      expect(
        await asyncUnwrap(asyncTakeWhile((value) => value === 2, asyncWrap([2, 2, 3, 2]))),
      ).toEqual([2, 2]);
      expect(await asyncUnwrap(asyncTakeWhile((_value, i) => i < 0, asyncWrap([2, 2])))).toEqual(
        [],
      );
    });
  });

  it('can take an async predicate', async () => {
    const iter = asyncTakeWhile(async (value) => value % 2 === 0, [2, 2, 3, 2, 2, 2]);
    expect(await asyncUnwrap(iter)).toEqual([2, 2]);
  });
});
