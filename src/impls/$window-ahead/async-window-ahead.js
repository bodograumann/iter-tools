/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$window-ahead.js#1643907550782
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator,
  _wrapAsyncGenerator,
  _asyncIterator,
} from '../../internal/asyncish.js';

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { CircularBuffer, ReadOnlyCircularBuffer } from '../../internal/circular-buffer.js';

export function __asyncWindowAhead(_x, _x2) {
  return _$__windowAhead.apply(this, arguments);
}

function _$__windowAhead() {
  _$__windowAhead = _wrapAsyncGenerator(function* (
    source,
    size,
    { filler = undefined, useFiller = true } = {},
  ) {
    const buffer = new CircularBuffer(size);
    const bufferReadProxy = new ReadOnlyCircularBuffer(buffer);

    let len = 0;
    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(source);
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : yield _awaitAsyncGenerator(_step2)).done);
        _iteratorAbruptCompletion = false
      ) {
        const value = _step.value;
        buffer.push(value);
        if (buffer.isFull()) {
          yield bufferReadProxy;
        }
        len++;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (useFiller) {
      for (let i = len; i < size; i++) {
        buffer.push(filler);
      }
    }

    if (len > 0 && len < size) yield bufferReadProxy;

    for (let i = 0; i < Math.min(size, len) - 1; i++) {
      buffer.shift();
      if (useFiller) {
        buffer.push(filler);
      }
      yield bufferReadProxy;
    }
  });

  return _$__windowAhead.apply(this, arguments);
}

export const asyncWindowAhead = /*#__PURE__*/ asyncIterableCurry(__asyncWindowAhead, {
  minArgs: 1,
  maxArgs: 2,
  validateArgs(args) {
    if (typeof args[1] !== 'number') {
      throw new Error(`${'asyncWindowAhead'} must be passed a numeric size`);
    }
  },
});
