/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$window-behind.js#1643907550784
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator,
  _wrapAsyncGenerator,
  _asyncIterator,
} from '../../internal/asyncish.js';
import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { CircularBuffer, ReadOnlyCircularBuffer } from '../../internal/circular-buffer.js';

export function __asyncWindowBehind(_x, _x2) {
  return _$__windowBehind.apply(this, arguments);
}

function _$__windowBehind() {
  _$__windowBehind = _wrapAsyncGenerator(function* (source, size, { filler } = {}) {
    const buffer = new CircularBuffer(size);
    const bufferReadProxy = new ReadOnlyCircularBuffer(buffer);

    buffer.fill(filler);

    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(source);
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : yield _awaitAsyncGenerator(_step2)).done);
        _iteratorAbruptCompletion = false
      ) {
        const value = _step.value;
        buffer.push(value);
        yield bufferReadProxy;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return _$__windowBehind.apply(this, arguments);
}

export const asyncWindowBehind = /*#__PURE__*/ asyncIterableCurry(__asyncWindowBehind, {
  minArgs: 1,
  maxArgs: 2,
  validateArgs(args) {
    if (typeof args[1] !== 'number') {
      throw new Error(`${'asyncWindowBehind'} must be passed a numeric size`);
    }
  },
});
