/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$window.test.ts#1643837503116
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { window } from 'iter-tools-es';
import { wrap, unwrapDeep } from '../../../test/helpers.js';

describe('window', () => {
  describe('when source is empty', () => {
    it('yields no windows', () => {
      expect(unwrapDeep(window(3, null))).toEqual([]);
      expect(unwrapDeep(window(3, undefined))).toEqual([]);
      expect(unwrapDeep(window(3, wrap([])))).toEqual([]);
    });
  });

  describe('when size(source) < size', () => {
    it('yields no windows', () => {
      expect(unwrapDeep(window(3, wrap([1, 2])))).toEqual([]);
    });
  });

  describe('when size(source) === size', () => {
    it('yields one full window', () => {
      expect(unwrapDeep(window(3, wrap([1, 2, 3])))).toEqual([[1, 2, 3]]);
    });
  });

  describe('when size(source) > size', () => {
    it('yields partial windows, then size(source)-size full windows', () => {
      expect(unwrapDeep(window(2, wrap([1, 2, 3])))).toEqual([
        [1, 2],
        [2, 3],
      ]);
    });
  });

  describe('when size is invalid', () => {
    it('throws a validation error', () => {
      expect(() => window('' as any, wrap([]))).toThrowErrorMatchingSnapshot();
    });
  });
});
