/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$zip-all.js#1643907550788
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { _awaitAsyncGenerator, _wrapAsyncGenerator } from '../../internal/asyncish.js';

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { asyncParallelEach } from '../../internal/async-parallel-each.js';
import { __asyncPeekerate } from '../$peekerate/async-peekerate.js';
import { __asyncMap } from '../$map/async-map.js';
import { __every } from '../$every/every.js';
import { __asyncToArray } from '../$to-array/async-to-array.js';

const isDone = (peekr) => peekr.done;

export function __asyncZipAll(_x) {
  return _$__zipAll.apply(this, arguments);
}

function _$__zipAll() {
  _$__zipAll = _wrapAsyncGenerator(function* (sources, { filler } = {}) {
    const peekrs = yield _awaitAsyncGenerator(
      __asyncToArray(__asyncMap(sources, __asyncPeekerate)),
    );
    let done = __every(peekrs, isDone);

    try {
      while (!done) {
        yield peekrs.map(({ value, done }) => (done ? filler : value));

        yield _awaitAsyncGenerator(asyncParallelEach(peekrs, (peekr) => peekr.advance()));

        done = __every(peekrs, isDone);
      }
    } finally {
      yield _awaitAsyncGenerator(asyncParallelEach(peekrs, (peekr) => peekr.return()));
    }
  });

  return _$__zipAll.apply(this, arguments);
}

export const asyncZipAll = /*#__PURE__*/ asyncIterableCurry(__asyncZipAll, {
  variadic: true,
  minArgs: 0,
  maxArgs: 1,
});
