/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$zip.js#1643907550789
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { _awaitAsyncGenerator, _wrapAsyncGenerator } from '../../internal/asyncish.js';

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import { asyncParallelEach } from '../../internal/async-parallel-each.js';
import { __asyncPeekerate } from '../$peekerate/async-peekerate.js';
import { __asyncMap } from '../$map/async-map.js';
import { __map } from '../$map/map.js';
import { __some } from '../$some/some.js';
import { __asyncToArray } from '../$to-array/async-to-array.js';

const isDone = (peekr) => peekr.done;

export function __asyncZip(_x) {
  return _$__zip.apply(this, arguments);
}

function _$__zip() {
  _$__zip = _wrapAsyncGenerator(function* (sources) {
    const peekrs = yield _awaitAsyncGenerator(
      __asyncToArray(__asyncMap(sources, __asyncPeekerate)),
    );
    let done = __some(peekrs, isDone);

    try {
      while (!done) {
        yield peekrs.map(({ value }) => value);

        yield _awaitAsyncGenerator(Promise.all(__map(peekrs, (peekr) => peekr.advance())));

        done = __some(peekrs, isDone);
      }
    } finally {
      yield _awaitAsyncGenerator(asyncParallelEach(peekrs, (peekr) => peekr.return()));
    }
  });

  return _$__zip.apply(this, arguments);
}

export const asyncZip = /*#__PURE__*/ asyncIterableCurry(__asyncZip, {
  variadic: true,
});
