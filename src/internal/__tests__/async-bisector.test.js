/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$bisector.test.js#1643907550813
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import {
  _awaitAsyncGenerator,
  _wrapAsyncGenerator,
  _asyncIterator,
} from '../../internal/asyncish.js';

import { asyncWrap, asyncUnwrap } from '../../test/async-helpers.js';
import { AsyncBisector } from '../async-bisector.js';

function asyncTestStrategy(_x, _x2, _x3) {
  return _$testStrategy.apply(this, arguments);
}

function _$testStrategy() {
  _$testStrategy = _wrapAsyncGenerator(function* (split, options, source) {
    let i = 0;
    let _iteratorAbruptCompletion = false;
    let _didIteratorError = false;
    let _iterator;
    let _iteratorError;

    try {
      _iterator = _asyncIterator(source);
      for (
        let _step, _step2;
        (_step2 = _iterator.next()),
          (_iteratorAbruptCompletion = !(_step =
            !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
              ? _step2
              : yield _awaitAsyncGenerator(_step2)).done);
        _iteratorAbruptCompletion = false
      ) {
        const value = _step.value;
        switch (++i) {
          case 1:
            yield value;
            break;
          case 2:
            yield split;
            yield value;
            return;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (_iteratorAbruptCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return _$testStrategy.apply(this, arguments);
}

const asyncTestBisector = (source) => {
  return new AsyncBisector(source, asyncTestStrategy, {});
};

describe('AsyncBisector', () => {
  it('allows the first half to be skipped', async () => {
    const [, second] = asyncTestBisector(asyncWrap([1, 2, 3]));
    expect(await asyncUnwrap(second)).toEqual([2]);
  });

  it('throws if only the first half is taken', async () => {
    const splits = asyncTestBisector(asyncWrap([1, 2, 3]));
    splits.next();
    expect(() => splits.return()).toThrowErrorMatchingSnapshot();
  });

  it('throws when the second half is consumed before the first', async () => {
    const [first, second] = asyncTestBisector(asyncWrap([1, 2, 3]));
    expect(await asyncUnwrap(second)).toEqual([2]);

    expect(
      await (async () => {
        try {
          await asyncUnwrap(first);
        } catch (e) {
          return e;
        }
      })(),
    ).toMatchSnapshot();
  });
});
