/* @macrome
 * @generatedby /generate/generators/impls/index.cjs
 * @generatedfrom ./$unwrap.js#1643907550854
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { _asyncIterator as _asyncIterator2, _asyncIterator } from '../../internal/asyncish.js';

import { asyncIsLoopable } from '../../internal/async-iterable.js';

export async function asyncUnwrap(iterable) {
  const values = [];

  let _iteratorAbruptCompletion = false;
  let _didIteratorError = false;
  let _iterator;
  let _iteratorError;

  try {
    _iterator = _asyncIterator(iterable);
    for (
      let _step, _step2;
      (_step2 = _iterator.next()),
        (_iteratorAbruptCompletion = !(_step =
          !(_step2 instanceof Promise) && !(_step2.value instanceof Promise)
            ? _step2
            : await _step2).done);
      _iteratorAbruptCompletion = false
    ) {
      const value = _step.value;
      values.push(value);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (_iteratorAbruptCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return values;
}

export async function asyncUnwrapDeep(iterable) {
  const values = [];

  let _iteratorAbruptCompletion2 = false;
  let _didIteratorError2 = false;
  let _iterator2;
  let _iteratorError2;

  try {
    _iterator2 = _asyncIterator2(iterable);
    for (
      let _step3, _step4;
      (_step4 = _iterator2.next()),
        (_iteratorAbruptCompletion2 = !(_step3 =
          !(_step4 instanceof Promise) && !(_step4.value instanceof Promise)
            ? _step4
            : await _step4).done);
      _iteratorAbruptCompletion2 = false
    ) {
      const value = _step3.value;
      if (typeof value !== 'string' && asyncIsLoopable(value)) {
        values.push(await asyncUnwrapDeep(value));
      } else {
        values.push(value);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (_iteratorAbruptCompletion2 && _iterator2.return != null) {
        await _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return values;
}
